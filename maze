/**
 * This program will read a text file to gather parameters in order to create a
 * "maze" that it will then solve recursively.  There is a method that displays
 * the pathing taken by the recursive method when the puzzle is solved.
 *
 * @author: Brandon Kirch
 * @version: 9/27/2022
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class maze {
    public static void main(String[] args) throws FileNotFoundException {
        //instantiate our scanner and file
        Scanner in = new Scanner(new File("C:\\Users\\brand\\IdeaProjects\\maze\\src\\maze.txt"));

        //create an array to hold the first two lines of integers to give the array parameters
        String[] size = new String[2];
        size[0] = in.nextLine();
        size[1] = in.nextLine();

        //create a char array based on specified parameters
        char[][] maze = new char[Integer.parseInt(size[0])][Integer.parseInt(size[1])];

        //create an array to give the recursive method starting coordinates
        String[] start = new String[2];
        start[0] = in.nextLine();
        start[1] = in.nextLine();
        int posX = Integer.parseInt(start[0]);
        int posY = Integer.parseInt(start[1]);

        //iterate through the text fill in order to fill the array with the chars
        //that will act as the boundaries for the maze
        while (in.hasNextLine()) {
            for (int i = 0; i < maze.length; i++) {
                maze[i] = in.nextLine().toCharArray();
            }
        }

        //call the method to solve the maze
        solveMaze(maze, posX, posY);

        //show the pathing taken by the method
        mazeOutput(maze);
    }

    //this method just displays the output of the array when we are finished
    public static void mazeOutput(char[][] maze) {
        for (int k = 0; k < maze.length; k++) {
            for (int s = 0; s < maze[k].length; s++) {
                System.out.print(maze[k][s] + " ");
            }
            System.out.println();
        }
    }

    //the recursive method for solving the maze
    public static void solveMaze(char[][] maze, int posX, int posY) {
        //base cases
        if (posX != maze.length-1 && maze[posX+1][posY] == 'E') {
            System.out.println("Solved");
        } else if (posY != maze[posX].length-1 && maze[posX][posY+1] == 'E') {
                System.out.println("Solved");
        } else if (posX != 0 && maze[posX-1][posY] == 'E') {
            System.out.println("Solved");
        } else if (posY != 0 && maze[posX][posY-1] == 'E') {
            System.out.println("Solved");

            //search for any neighboring O's first
        } else if (posX != maze.length-1 && maze[posX+1][posY] == 'O'){
            maze[posX+1][posY] = 'P';
            solveMaze(maze, posX + 1, posY);
        } else if (posY != maze[posX].length-1 && maze[posX][posY+1] == 'O'){
            maze[posX][posY+1] = 'P';
            solveMaze(maze, posX, posY + 1);
        } else if (posX != 0 && maze[posX-1][posY] == 'O') {
            maze[posX - 1][posY] = 'P';
            solveMaze(maze, posX - 1, posY);
        } else if (posY != 0 && maze[posX][posY-1] == 'O'){
            maze[posX][posY-1] = 'P';
            solveMaze(maze, posX, posY - 1);

            //next search for any P's which are coordinates we have been to once
        }  else if (posY != 0 && maze[posX][posY-1] == 'P'){
            maze[posX][posY]= 'D';
            maze[posX][posY-1] = 'D';
            solveMaze(maze, posX, posY - 1);
        } else if (posX != 0 && maze[posX-1][posY] == 'P') {
            maze[posX][posY]= 'D';
            maze[posX - 1][posY] = 'D';
            solveMaze(maze, posX - 1, posY);
        } else if (posY != maze[posX].length-1 && maze[posX][posY+1] == 'P') {
            maze[posX][posY]= 'D';
            maze[posX][posY + 1] = 'D';
            solveMaze(maze, posX, posY + 1);
        } else if (posX != maze.length-1 && maze[posX+1][posY] == 'P'){
            maze[posX][posY]= 'D';
            maze[posX+1][posY] = 'D';
            solveMaze(maze, posX + 1, posY);

            //next look for any D coordinates that we have been to twice previously.
            //a more efficient method may not need this step.
        } else if (posY != 0 && maze[posX][posY-1] == 'D') {
            maze[posX][posY]= 'X';
            maze[posX][posY - 1] = 'X';
            solveMaze(maze, posX, posY - 1);
        } else if (posX != 0 && maze[posX-1][posY] == 'D') {
            maze[posX][posY]= 'X';
            maze[posX - 1][posY] = 'X';
            solveMaze(maze, posX - 1, posY);
        } else if (posY != maze[posX].length-1 && maze[posX][posY+1] == 'D') {
            maze[posX][posY]= 'X';
            maze[posX][posY + 1] = 'X';
            solveMaze(maze, posX, posY + 1);
        } else if (posX != maze.length-1 && maze[posX+1][posY] == 'D') {
            maze[posX][posY]= 'X';
            maze[posX + 1][posY] = 'X';
            solveMaze(maze, posX + 1, posY);
        }
    }
}

